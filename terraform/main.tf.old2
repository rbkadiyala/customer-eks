provider "aws" {
  region = local.region
}

data "aws_availability_zones" "available" {
  # Exclude local zones
  filter {
    name   = "opt-in-status"
    values = ["opt-in-not-required"]
  }
}

locals {
  name   		= "my-eks-managed-cluster"
  region 		= "us-east-1"
  environment 	= "dev"
  project 		= "my-project"
  team 			= "team"

  vpc_cidr = "10.0.0.0/16"
  azs      = slice(data.aws_availability_zones.available.names, 0, 3)

  tags = {
    Project    	= local.project
    Team 		= local.team
    Environment = local.environment
	Cluster		= local.name
  }
}

################################################################################
# VPC
################################################################################

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 5.0"

  name = local.name
  cidr = local.vpc_cidr

  azs             = local.azs
  private_subnets = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 4, k)]
  public_subnets  = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 48)]
  intra_subnets   = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 52)]

  enable_nat_gateway = true
  single_nat_gateway = true

  public_subnet_tags = {
    "kubernetes.io/role/elb" = 1
  }

  private_subnet_tags = {
    "kubernetes.io/role/internal-elb" = 1
  }

  tags = local.tags
}


module "eks_al2" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 20.0"

  cluster_name    = "${local.name}-al2"
  cluster_version = "1.31"

  # EKS Addons
  cluster_addons = {
    coredns                = {}
    eks-pod-identity-agent = {}
    kube-proxy             = {}
    vpc-cni                = {}
  }

  vpc_id     = module.vpc.vpc_id
  subnet_ids = module.vpc.private_subnets

  eks_managed_node_groups = {
    example = {
      # Starting on 1.30, AL2023 is the default AMI type for EKS managed node groups
      ami_type       = "AL2_x86_64"
      instance_types = ["t2.small"]

      min_size = 1
      max_size = 2
      # This value is ignored after the initial creation
      # https://github.com/bryantbiggs/eks-desired-size-hack
      desired_size = 1
    }
  }

  tags = local.tags
}

################################################################################
# IAM Role for EKS Cluster
################################################################################

resource "aws_iam_role" "my_iam_role_eks_master" {
  name = "${local.name}-eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Principal = {
          Service = "eks.amazonaws.com"
        }
        Effect = "Allow"
        Sid    = ""
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_eks_cluster" {
  role       = aws_iam_role.my_iam_role_eks_master.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_eks_logging" {
  role       = aws_iam_role.my_iam_role_eks_master.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
}

################################################################################
# IAM Role for EKS Node Group
################################################################################

resource "aws_iam_role" "my_iam_role_eks_node_group" {
  name = "${local.name}-eks-node-group-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
        Effect = "Allow"
        Sid    = ""
      }
    ]
  })
}

/*
resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_eks_vpc" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_VPCResourceController"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_eks_elb" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonElasticLoadBalancingFullAccess"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_eks_node" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
}

resource "aws_iam_role_policy_attachment" "aws_iam_role_policy_attachment_eks_cni" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_ec2_ecr" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_s3" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_cloudwatch" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_cloudwatch_metrics" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/CloudWatchFullAccess"
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_x-ray" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
}

resource "aws_iam_role_policy_attachment" "secrets_manager_policy_attachment" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
}

resource "aws_iam_role_policy_attachment" "route53_policy_attachment" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonRoute53FullAccess"
}

################################################################################
# IAM Role for Auto Scaling
################################################################################

resource "aws_iam_policy" "my_iam_policy_auto_scaling" {
  name   = "my-iam-policy-auto_scaling"
  policy = <<EOF
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Action": [
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:DescribeTags",
          "autoscaling:DescribeLaunchConfigurations",
          "autoscaling:SetDesiredCapacity",
          "autoscaling:TerminateInstanceInAutoScalingGroup",
          "ec2:DescribeLaunchTemplateVersions",
          "ec2:DescribeInstances",
          "ec2:DescribeLaunchTemplates",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeKeyPairs",
          "ec2:DescribeImages",
          "ec2:RunInstances",
          "ec2:TerminateInstances"
        ],
        "Effect": "Allow",
        "Resource": "*"
      }
    ]
  }
EOF
}


resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_auto_scaling" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = aws_iam_policy.my_iam_policy_auto_scaling.arn
}

################################################################################
# IAM Role for EFS CSI Driver
################################################################################

resource "aws_iam_role" "my_iam_role_efs" {
  name               = "my-iam-role-efs"
  assume_role_policy = <<EOF
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Principal": {
          "Service": "eks.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
      }
    ]
  }
EOF
}

resource "aws_iam_policy" "my_iam_policy_efs" {
  name        = "my-iam-policy-efs"
  description = "EFS access for EKS workers"
  policy      = <<EOF
  {
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "elasticfilesystem:ClientMount",
          "elasticfilesystem:ClientWrite",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets"
        ],
        "Resource": "*"
      }
    ]
  }
EOF
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_efs" {
  role       = aws_iam_role.my_iam_role_efs.name
  policy_arn = aws_iam_policy.my_iam_policy_efs.arn
}

resource "aws_iam_instance_profile" "my_iam_instance_profile_eks_node_group" {
  depends_on = [aws_iam_role.my_iam_role_eks_node_group]
  name       = "${local.name}-eks-node-group-instance-profile"
  role       = aws_iam_role.my_iam_role_eks_node_group.name
}

resource "aws_iam_policy" "my_iam_policy_eks_nodegroup_additional_permissions" {
  name        = "my-iam-policy-eks-nodegroup-additional-permissions"
  description = "Additional permissions for EKS workers"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "ec2:DescribeAvailabilityZones"
        ],
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "my_iam_role_policy_attachment_eks_nodegroup_additional_permissions" {
  role       = aws_iam_role.my_iam_role_eks_node_group.name
  policy_arn = aws_iam_policy.my_iam_policy_eks_nodegroup_additional_permissions.arn
}



