name: CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows the workflow to be triggered manually from the GitHub UI

env:
  AWS_REGION: us-east-1
  SPRING_BOOT_APP_NAME: my-spring-boot-app  # Spring Boot app name as an environment variable
  CONTAINER_PORT: 8080
  IMAGE_TAG: ${{ github.sha }}  # Use GitHub SHA as the tag for the image
  EKS_CLUSTER_NAME: my-eks-cluster  # EKS cluster name as an environment variable

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: 18
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test with Maven
        run: mvn --batch-mode --update-snapshots --no-transfer-progress clean package

      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Download JAR file
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          REPO_NAME="${{ secrets.SPRING_BOOT_APP_NAME }}"
          if [ -z "$REPO_NAME" ]; then
            echo "Error: ECR repository name (SPRING_BOOT_APP_NAME) is not set!"
            exit 1
          fi
          # Check if the repository exists
          REPO_EXISTS=$(aws ecr describe-repositories --repository-names "$REPO_NAME" --region ${{ secrets.AWS_REGION }} --query 'repositories[0].repositoryName' --output text)
          if [ "$REPO_EXISTS" == "None" ]; then
            echo "ECR repository does not exist. Creating a new one..."
            aws ecr create-repository --repository-name "$REPO_NAME" --region ${{ secrets.AWS_REGION }}
          else
            echo "ECR repository $REPO_NAME already exists."
          fi

      - name: Build Docker image
        run: |
          ECR_REPOSITORY_URL="761018885188.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.SPRING_BOOT_APP_NAME }}"
          docker build -t $ECR_REPOSITORY_URL:${{ github.sha }} .
          docker tag $ECR_REPOSITORY_URL:${{ github.sha }} $ECR_REPOSITORY_URL:${{ github.sha }}

      - name: Login to ECR
        run: |
          ECR_REPOSITORY_URL="761018885188.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.SPRING_BOOT_APP_NAME }}"
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL

      - name: Tag and push Docker image
        run: |
          ECR_REPOSITORY_URL="761018885188.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.SPRING_BOOT_APP_NAME }}"
          docker push $ECR_REPOSITORY_URL:${{ github.sha }}

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
          mkdir -p k8s
          export ECR_REPOSITORY_URL="761018885188.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.SPRING_BOOT_APP_NAME }}:${{ github.sha }}"
          envsubst < k8s-deployment.yaml > k8s/k8s-deployment.yaml
          echo "resources:" > k8s/kustomization.yaml
          echo "- k8s-deployment.yaml" >> k8s/kustomization.yaml
          kubectl kustomize k8s | kubectl apply -f - --force
